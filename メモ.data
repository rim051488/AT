ゲーム業界への就職(就活)
・落ちまくると自信なくす
	でも落ちます
	自信なくしてるのを悟れれるともっと落ちます
・とはいえ、皆さん経験が浅いので
	たいてい落ちます。
	
相当に優秀な人でも落ちます。
	①相性(逆に言うと、そうでもない人でも受かることもある)
	②場数が足りてない(落ちるために受けましょう)
		落ちるというよりも業界の人と話す機会くらいに
		とらえておきましょう。なので、序盤は別に行きたくない
		会社を受けまくってOK。
	③優秀さをアピールできない
		→なので、自分の「お隣さんよりできるところ」や
		「今までやってきた成果」をメモ帳とかでいいんで
		『全部』書き出しましょう。
		意識的に書き出しておくだけで、いざというときに
		「あっ…」と思い浮かぶ。

学校で練習はたくさんあると思います。特に後期から厳しくなる
	めっちゃ面接練習します。厳しいです。
	→とはいえ、実際の面接はそこからまた「違う」
	前提①：練習はしょせん練習なので、最低ライン。
	求職票受付面接に合格しても実際は質というか、
	方向性が違う。
	前提②：会社によって(ニーズが)全然違う
		最低限の準備としては会社のことを滅茶苦茶調べる
		ネットに公開されてる情報くらいは頭に入れとく
		(※ネット上で〇〇社の人、みたいな人がいたら
		疑ってかかろう)(ケーツー)
		
まずは作品が通過するのが第一なので、「完成度」は
上げておきましょう。
とはいえ、就活段階で完成①,完成②,未完成③とかはOK
	未完成のものも見せたい場合は「現在制作中」と書いて
	ポートフォリオに乗っけよう
	とはいえ、基本的には完成品を３～４個作れるよう頑張っておく
	
作品＆書類＆面接に共通の話
	相手の立場を考えよう(自分のことをぶつける前にちょっと)
	
例えば「君の強みは何ですか？」
	・プログラミングできます→何が得意？
		デザインパターンです→ダメ
		なんでこんなことを聞くかというと、雇った後のことを
		考えてる→どこに配属するか、誰の下につけるか。
		何が得意？っていうのは、グラフィック系とか
		システム(メモリとかスレッドとか)周り系とかを
		聞いてる。
	・まじめです
	→自分の専門性がどこに伸びてるか、ていうのを
	把握して、しゃべれるようになっておきましょう。
	
	「どっちかというと～」「興味の方向は…」
	くらいのノリでいいんで、自分の専門性を意識
	しておきましょう。
	
	シェーダとか、メモリ最適化はむずいので、必ずしも
	アピールできるわけではない、便利な言葉としては
	「意識することを心がけています」
	「勉強中です」と答えるとどこまで勉強しているか聞かれる
	
	これじゃだめで、深堀りしてください
	
	
作品作り：完成度を上げること＆強みを示せるように
	個人的な意見は→とにかく目立てるように
	
相手のことを考えた時に「目立つ」って重要です。
採用側は開発しながらチェックしてる。
記憶に残らん奴は捨てられるので、見た目の派手さとかは
重要です。

だから、エフェクト、音、画面揺れは大事です(ムービーしか
見られない場合なんかもあるので…)
ここに技術的な観点を加えるなら「え？これどうやってんの？」
と思わせたらかなり高感度が上がる。

書類も、意識してる自分の強みを示せるようにする
志望動機：徹底的に、会社を調べて、自分に合ってる部分を見つける

ポートフォリオ：今まで作ったのを丁寧に説明する
	ゲーム紹介で：タイトル画面をバーンと出してる×
	どういうゲームかが一目で分かるようにしてほしい
	プレイ中の画面がいいと思う
	
面接：向こうが何を知りたいのか、を相手の視点に立って
	考えて答える。
	答えに多少詰まってもいいから、何を聞きたいのかを
	考えて答えてほしい。
	
「真面目」について、これを自己PRにするのはどうかなと
思う
真面目はいいことだし、会社も望んでいる。
真面目かどうかって、主観でしかない。
自分の口からいうことじゃない。これを言う時点で
「僕に取り柄がない」と言ってるようなもん。
あなたは会社にどういう利益をもたらすのか
	
一番組織に不要なのは「無能な働き者」と言われている。









UnrealEngineのC++版について
プロジェクト作成時に「ブループリント」を
C++にするだけでOK。

別にC++でプロジェクト作っても
フルブループリントでゲームを作ることは可能
なので、今まで通りBPを使って開発はOK。

ただし、C++にすると、C++書き換えのたびに
UE4エディタが再起動することになるため、
かなり、時間がかかるようになる。

①C++部分は再コンパイルが必要(ビルド時間が馬鹿にならない)
	→なので、C++の位置づけはどうしようかという話
	序盤で、基本的なクラスを用意しまくって、後は
	再コンパイルが必要ないようにする。
	派生はBP(中盤)にお任せする。
	→終盤はまたC++が活躍することになるだろう(地獄)
		最適化に必要になる。何度も再ビルドかける必要も
		出てきてたぶん大変
		
	外部のライブラリと連携する部分にC++を使ったりする。
	
基本的にゲーム上で使うアクター系クラスは頭にAがつく
AActor、ACharacter、Apawnというような名前になる。
自作のアクター系クラスは例えば
AMyActor、

「Unrealのクラスって全部先頭にAがつくの？」
AはActorのAなので、アクター派生クラスにしかつかない。
じゃあ、Unrealの中で使う一般的なC++的なクラスは
どういう名前なの？

これは先頭にUがつく。すべてはUObjectから継承

PBRについて
古典的レンダリングが
・ディフューズ(内積で起算可能)
・スペキュラー(内積と指数で計算可能)
・アンビエント(maxか加算で計算可能)
で構成されていた。これを計算式を変えて
・ラフネス(F項＋D項＋G項)
・メタリック(材質の色が出るかどうか)
・アルベド(元の色)
にしたものがPBRです。そもそも計算式がややこしい
あと、PBRって呼ばれてるものがリアルに見えるのは
計算式のおかげばかりではない…。

それは何か、IBL(ImageBaseLighting)である。
Lightingなんていうとりますけども、結局は周囲が
映りこむかどうかの話。
周りを反射すると、より「それっぽくなる」
で、PBRを使ってるレンダラの場合はこの周りが映り込むのを
表現するために「キューブマップ」というのを使っている。

で、ラフネス値が高いと、周囲の光が拡散して、ぼやけて見える。

普通に考えると「ガウスぼかし」を使ってぼけさせるが、
これは滅茶苦茶重い←なぜかというと、1ピクセルをぼかすために
周囲r*r分のピクセル情報が必要になるから。
仮に10ピクセルぼかそうとすると100ピクセルの参照が
必要になる→これは重い

もともとモアレやエイリアス防止のために
「ミップマップ」というのが使われてきた。
ミップマップというのは、あらかじめ半分半分の大きさの
テクスチャを用意しているものである。

ゲームではこの「ミップマップ」とバイリニア補間を用いて
ぼかしを行っている。どのミップマップを使うかという話な
だけなので、参照ピクセル回数は1回でいい。これでぼけてる。

ただし、PBRは難しいし、環境マップは通常、
動的にキューブマップを作成して(ミップマップも同時製造)して
それを用いてリアル感出してる。

ただしPBRの計算式は難しいし、キューブマップを動的に
作るのも大変。

なんとか、diffuse,specular,ambient & normalmapあとはラフネス
とかでなんとかそれっぽくならないのか？

まず、IBLに関してですが、どうせボケると考えて
どこでも通用しそうな背景で「スフィアマップ」を用意しておく

PBRはなぜリアルなのか
①フレネル(視線と直行するほど反射する)
	これをなんちゃって再現する
	1-saturate(-V・N)
	これを反射率に反映させる
②PBRの肝としてはエネルギー保存の法則があるので、
	ラフネス値をrとすると
	col = lerp(specular,diffuse,rgh);
	で、それっぽくなる。当然暗くなるので、そこは調整
③反射率の高い部分は周りを映り込ますんですが、
	スフィアマップでごまかす



基本的にはAWSが動かなくなった
→CloudFlare

「インターネットが壊れた」っていうときは
たいてい
最大手：AWS→AmazonWebService
GCP→GoogleCloudPlatform
Aure→MS Azure

DMM→自前クラウド？
アメリカ系はR18に厳しい
→アプリ作るときも気を付ける
AppStoreとかGooglePlayは厳しい
DMM
①ブラウザゲームにしちゃう
②DMMアプリの中からDMMコンテンツを再生できるように
③野良apkを配布

GooglePlayで発行したものしか実行させない
用にはできる。

Cloudって結構筒抜けなので気を付ける

頂点情報は、描画に利用できる時点でGPU側のメモリに
のっかっている。

基本的にはもうこの時点でCPU側から頂点情報を
いじることはできない
理由：
①CPU側からいじられるようにすると重い
②本来直接いじらることできない


ただし「切る」とか「壊す」などのメッシュ(頂点)情報の
増減もしくはトポロジーの変化がある場合には
どうしてもCPUの介入が必要。

なので、切る場合はCPUAccessをONにする必要がある。