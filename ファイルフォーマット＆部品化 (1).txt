出力データの種類
①バイナリデータ：バイナリなので人が読んでもわからん
	※自分のプロジェクト内だけで使うなら、これがおすすめ
	メリット→速い、セキュリティ高い、慣れると楽
	デメリット→可搬性に劣る、バージョン管理が面倒
				フォーマットの変更も面倒
②テキストデータ：csv,xml,json,独自,スクリプトファイル
	csv：カンマ区切りデータ←一様なデータに向いてる
			→利用側が配列にしやすい(ロード時)
			→={a,b,c,...}みたいにすればハードコーディングも可
		メリット→わかりやすい、貼り付けりゃ配列になる
		デメリット→柔軟性が低すぎる、一様データにしか使えない
	xml：タグで管理する<XML></XML>みたいなデータ
				階層構造みたいなデータに向いてる
					→木構造のデータの際に使用する
					→ボーンとかによく使われてた
		メリット→可搬性が高い(人がタグみりゃ意味が分かる)
				どのようにもかけるので柔軟性が高い
				　タグを自分で定義できるので、データ内に
				　ユーザ定義型を作れるほど柔軟性が高い
		デメリット→非常にデータがでかくなりがち
					読み込みコストが高すぎる
				→ゲームに向いてない
		※加工前の可搬性のあるデータに使う
			→プロジェクトファイルなど
	json：xmlの遅さを改良したもの
		※今一番使われてるテキスト形式
			Googleとかもxml→json
			gltf→json
			glb→json+バイナリ
			ちなみに"gltf"は現在のOpenGL系の標準
			ちなみに最近のVRアバターで使われてるフォーマット
			→vrm(gltfをkawaiiに拡張したもの)
			基本的にテキスト形式のデータはこれ
		どういう形式か、xmlみたいに階層構造
			タグではなく{}
			{
				height:160,
				weight:58,
				age:46,
				wallet:{3,30,400,500};
			}
		一番使われてるので、対応アプリも多い
			(Unityアセットやライブラリが豊富)


ゲーム会社の例：
各プロジェクト共通で使用するデータはテキスト形式
	テキスト：プログラマとデザイナーでやり取りするものなど
	バイナリ：実機で使う
	
	データのビルド時にテキスト→バイナリに変換
	
	→やり取りは柔軟に：実機の読み込みは速く


パターンを使うのはいいけど、今の直面してる問題に
あってるそれ？

そのツールを使うのはいいけど、それって、今直面してる
問題に最適のツールですか？


(30*4+2)*47=6580
応募人数が6580人
募集1000人

1/6

他人よりも多く、他人よりも「目立つ」ゲームを作る必要がある
「ゲームプログラマならC++だよ」
と言われたとしても、「目に入らなきゃ見てもらえん」
「目立つ」「数(+1個でも)」
なんだかんだ言いながら「やる気」を見てる。
ぶっちゃけやる気がなくても、学校の課題程度ならやる。
その場合、ゲームの本数としては前期の課題。後期の課題で
２本
競争原理が働いた場合、この２本がよほど目立つか
３本、もしくは４本、のように他より多く作る。

目立つ：技術(細かすぎて伝わらない事も多い)
		見た目！！！
		音！！！←早めに鳴らしておこう。
		←とにかく見る者の目を楽しませてください。
		できればシェーダかけるようになってほしい

量産体制：量産というのは「部品」の量産を考慮しましょう。
C++だったら、各クラスをモックで動くようにしておく

Unityの場合は、Prefab化して、unitypackage化できる
状態にしておきましょう(特にスクリプトやシェーダ部分など)

C++にせよUnityにせよ、「部品化」しておくと、後々
時間が短縮できる→２本が３～４本にできる。





