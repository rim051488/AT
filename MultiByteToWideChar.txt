C++のSTL(Standard Template Library)
Templateでできたライブラリ
→基本的にはヘッダのみで完結している

Templateはプリコンパイル時に「展開」
されます。
CTest<T>

CTest<char>
なので、型がどういう風に展開されるか
知ってる状態じゃないと使えない
つまりヘッダに定義が書かれてないと
展開できないので、ヘッダにすべて書かれてる

なので、実質inlineみたいな扱いです。

普通の関数
void Func(){
}
これはコンパイル時に、特定の番地(0x1234)に割り当てられて
Func();で呼ばれたときに、そこにジャンプします。

inline void Func(){
	printf("a");
	printf("b");
}
inlineの場合は、関数の内容がプリコンパイル時に展開されます。

Func();
→
printf("a");
printf("b");

で、STLはほぼすべてテンプレート関数およびテンプレートクラス
でできています←なのでヘッダですべて完結してる

vector<T>なんかはすべてヘッダで完結してる
stringの場合は、vector<char>みたいに型が決定してるので
一部cpp側にあって隠蔽されてる実装もある



マルチバイト文字(SJIS)
ワイド文字(Unicode←UTF-8)
普通のchar,stringであらわされるのはマルチバイト文字
wchar_t, wstringであらわされるのが、ワイド文字

で、プロジェクトをUnicodeで作っている場合
DxLib::DrawFormatStringの文字はワイド文字で指定する必要が
あります(文字列リテラルだとLをつける)
(もし、DrawFormatStringの文字指定がマルチバイトの時は
文字化けする可能性があります)

なので、例えば
DrawFormatString(10, 40, 0xffffff, L"text=%s", str.c_str());
などと書いた場合strがstring型ならば文字化けします

なので、元の文字がマルチバイトだった場合は明示的に変換する
必要がある。

変換のための関数がMultiByteToWideChar。で、この関数が
ちょっと曲者で、２回呼び出す必要があります。
１回目で必要な文字数を得て、それで受け取るメモリを確保し
２回目で、そのメモリに変換後の文字列をコピーします
(マルチバイトの文字数とワイドの文字数が違う可能性が
あるため、このような回りくどいことをやってる)

①１回目
int cnt=MultiByteToWideChar(CP_UTF8,0,
	str.c_str(),//元の文字列
	str.length(),//元の文字数
	nullptr,
	0);//１回目は変換後のポインタはnullptrで、文字数も0で
	指定する
これにより、必要な文字数がcntに入っている。

②ワイドにおける必要文字数がわかっているので確保する
wstring wstr;
wstr.resize(cnt);

③２回目呼び出し。ここで実際の変換コピーが行われる
MultiByteToWideChar(CP_UTF8,0,
	str.c_str(),//元の文字列
	str.length(),//元の文字数
	&wstr[0],//受け取るワイド文字列のアドレス
	wstr.length());//受け取る文字数
ここまでやれば、マルチバイトの文字列をワイド文字列に変換した
情報がwstrに入っている。これを用いて表示を行う。

DrawFormatString(10, 40, 0xffffff, L"text=%s", wstr.c_str());
こうすれば化けずに表示できるようになる。
できれば、今のうちにこの流れは関数化して、自分のゲームで
使えるようにしておこう。